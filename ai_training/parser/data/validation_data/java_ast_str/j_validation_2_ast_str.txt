(compilationUnit (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class (identifier TestJavaFile) (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) (identifier main) (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType (typeIdentifier String)) [ ]) (variableDeclaratorId (identifier args)))) )) (methodBody (block { (blockStatement (statement for ( (forControl (forInit (localVariableDeclaration (typeType (primitiveType int)) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier i)) = (variableInitializer (expression (primary (literal (integerLiteral 1))))))))) ; (expression (expression (primary (identifier i))) <= (expression (primary (literal (integerLiteral 10))))) ; (expressionList (expression (expression (primary (identifier i))) ++))) ) (statement (block { (blockStatement (statement if (parExpression ( (expression (expression (expression (primary (identifier i))) % (expression (primary (literal (integerLiteral 2))))) == (expression (primary (literal (integerLiteral 0))))) )) (statement (block { (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (expression (primary (identifier i))) + (expression (primary (literal " is even"))))) )))) ;)) })) else (statement (block { (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (expression (primary (identifier i))) + (expression (primary (literal " is odd"))))) )))) ;)) })))) })))) }))))) }))))
