(compilationUnit (importDeclaration import (qualifiedName (identifier java) . (identifier util) . (identifier Scanner)) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class (identifier TestJavaFile) (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) (identifier main) (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType (typeIdentifier String)) [ ]) (variableDeclaratorId (identifier args)))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType (typeIdentifier Scanner))) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier scanner)) = (variableInitializer (expression new (creator (createdName (identifier Scanner)) (classCreatorRest (arguments ( (expressionList (expression (expression (primary (identifier System))) . (identifier in))) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (primary (literal "Enter an integer:")))) )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType int)) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier number)) = (variableInitializer (expression (expression (primary (identifier scanner))) . (methodCall (identifier nextInt) (arguments ( )))))))) ;) (blockStatement (statement if (parExpression ( (expression (expression (primary (identifier number))) > (expression (primary (literal (integerLiteral 0))))) )) (statement (block { (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (primary (literal "The number is positive.")))) )))) ;)) })) else (statement if (parExpression ( (expression (expression (primary (identifier number))) < (expression (primary (literal (integerLiteral 0))))) )) (statement (block { (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (primary (literal "The number is negative.")))) )))) ;)) })) else (statement (block { (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (primary (literal "The number is zero.")))) )))) ;)) }))))) (blockStatement (statement (expression (expression (primary (identifier scanner))) . (methodCall (identifier close) (arguments ( )))) ;)) }))))) }))))
