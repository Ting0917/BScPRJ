(compilationUnit (importDeclaration import (qualifiedName (identifier java) . (identifier util) . (identifier Scanner)) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class (identifier TestJavaFile) (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) (identifier main) (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType (typeIdentifier String)) [ ]) (variableDeclaratorId (identifier args)))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType (typeIdentifier Scanner))) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier scanner)) = (variableInitializer (expression new (creator (createdName (identifier Scanner)) (classCreatorRest (arguments ( (expressionList (expression (expression (primary (identifier System))) . (identifier in))) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (primary (literal "Enter a number (1-7) for the day of the week:")))) )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType int)) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier dayNumber)) = (variableInitializer (expression (expression (primary (identifier scanner))) . (methodCall (identifier nextInt) (arguments ( )))))))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType (typeIdentifier String))) (variableDeclarators (variableDeclarator (variableDeclaratorId (identifier dayName))))) ;) (blockStatement (statement switch (parExpression ( (expression (primary (identifier dayNumber))) )) { (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 1)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Monday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 2)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Tuesday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 3)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Wednesday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 4)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Thursday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 5)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Friday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 6)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Saturday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel case (expression (primary (literal (integerLiteral 7)))) :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Sunday")))) ;)) (blockStatement (statement break ;))) (switchBlockStatementGroup (switchLabel default :) (blockStatement (statement (expression (expression (primary (identifier dayName))) = (expression (primary (literal "Invalid day")))) ;)) (blockStatement (statement break ;))) })) (blockStatement (statement (expression (expression (expression (primary (identifier System))) . (identifier out)) . (methodCall (identifier println) (arguments ( (expressionList (expression (expression (primary (literal "The day is: "))) + (expression (primary (identifier dayName))))) )))) ;)) (blockStatement (statement (expression (expression (primary (identifier scanner))) . (methodCall (identifier close) (arguments ( )))) ;)) }))))) }))))
