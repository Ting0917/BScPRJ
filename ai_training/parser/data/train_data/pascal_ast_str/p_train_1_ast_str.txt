(program (programHeading program (identifier TestPascalFile) ;) (block (typeDefinitionPart type (typeDefinition (identifier TIntArray) = (type_ (structuredType (unpackedStructuredType (arrayType array of Integer))))) ;) (procedureAndFunctionDeclarationPart (procedureOrFunctionDeclaration (functionDeclaration function (identifier TwoSum) (formalParameterList ( (formalParameterSection (parameterGroup (identifierList (identifier nums)) : (typeIdentifier (identifier TIntArray)))) ; (formalParameterSection (parameterGroup (identifierList (identifier target)) : (typeIdentifier Integer))) )) : (resultType (typeIdentifier (identifier TIntArray))) ; (block (variableDeclarationPart var (variableDeclaration (identifierList (identifier map)) : (type_ (structuredType (unpackedStructuredType (arrayType array of Integer))))) ; (variableDeclaration (identifierList (identifier i) , (identifier complementary) , (identifier index)) : (type_ (simpleType (typeIdentifier Integer)))) ;) (compoundStatement begin (statements (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier SetLength) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier map)))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 10000)))))))))) ))))) ; (statement (unlabelledStatement (structuredStatement (repetetiveStatement (forStatement for (identifier i) := (forList (initialValue (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0))))))))) to (finalValue (expression (simpleExpression (term (signedFactor (factor (functionDesignator (identifier High) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier nums))))))))) ))))))))) do (statement (unlabelledStatement (structuredStatement (compoundStatement begin (statements (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier complementary)) := (expression (simpleExpression (term (signedFactor (factor (variable (identifier target))))) (additiveoperator -) (simpleExpression (term (signedFactor (factor (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (variable (identifier i))))))) ]))))))))))) ; (statement (unlabelledStatement (structuredStatement (conditionalStatement (ifStatement if (expression (simpleExpression (term (signedFactor (factor ( (expression (simpleExpression (term (signedFactor (factor (variable (identifier map) [ (expression (simpleExpression (term (signedFactor (factor (variable (identifier complementary))))))) ]))))) (relationaloperator <>) (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0))))))))) )))))) then (statement (unlabelledStatement (structuredStatement (compoundStatement begin (statements (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier SetLength) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier Result)))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 2)))))))))) ))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier Result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (variable (identifier i))))) (additiveoperator +) (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1))))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier Result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (variable (identifier map) [ (expression (simpleExpression (term (signedFactor (factor (variable (identifier complementary))))))) ])))))))))) ; (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier Exit))))) ; (statement (unlabelledStatement (simpleStatement emptyStatement_)))) end))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier map) [ (expression (simpleExpression (term (signedFactor (factor (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (variable (identifier i))))))) ])))))) ]) := (expression (simpleExpression (term (signedFactor (factor (variable (identifier i))))) (additiveoperator +) (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1))))))))))))) ; (statement (unlabelledStatement (simpleStatement emptyStatement_)))) end))))))))) ; (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier SetLength) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier Result)))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 2)))))))))) ))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier Result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0)))))))) ]) := (expression (simpleExpression (term (signedFactor - (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier Result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))) ]) := (expression (simpleExpression (term (signedFactor - (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))))))) ; (statement (unlabelledStatement (simpleStatement emptyStatement_)))) end)))) ;) (variableDeclarationPart var (variableDeclaration (identifierList (identifier nums)) : (type_ (simpleType (typeIdentifier (identifier TIntArray))))) ; (variableDeclaration (identifierList (identifier result)) : (type_ (simpleType (typeIdentifier (identifier TIntArray))))) ;) (compoundStatement begin (statements (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier SetLength) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier nums)))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 4)))))))))) ))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 2)))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 7)))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 2)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 11)))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier nums) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 3)))))))) ]) := (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 15)))))))))))) ; (statement (unlabelledStatement (simpleStatement (assignmentStatement (variable (identifier result)) := (expression (simpleExpression (term (signedFactor (factor (functionDesignator (identifier TwoSum) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier nums)))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 9)))))))))) ))))))))))) ; (statement (unlabelledStatement (simpleStatement (procedureStatement (identifier WriteLn) ( (parameterList (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (string 'Index 1: ')))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 0)))))))) ]))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (string ' Index 2: ')))))))) , (actualParameter (expression (simpleExpression (term (signedFactor (factor (variable (identifier result) [ (expression (simpleExpression (term (signedFactor (factor (unsignedConstant (unsignedNumber (unsignedInteger 1)))))))) ])))))))) ))))) ; (statement (unlabelledStatement (simpleStatement emptyStatement_)))) end)) . <EOF>)
